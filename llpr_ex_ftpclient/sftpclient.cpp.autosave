#include "sftpclient.h"
#include <QDir>
#include <QFile>
#include <QApplication>

#include <libssh2.h>
#include <libssh2_sftp.h>

#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>
#include <arpa/inet.h>

#include <sys/types.h>
#include <fcntl.h>
#include <errno.h>
#include <stdio.h>
#include <ctype.h>

#include "commonvalues.h"

SftpClient::SftpClient(int id, Syslogger *plogger,QThread *parent) : QThread(parent)
{
    int index = commonvalues::center_list.count();
    centerid = id;
    log = plogger;

    codec = QTextCodec::codecForName("eucKR");
    encoderw = codec->makeEncoder(QTextCodec::IgnoreHeader);

    m_iFTPTrans = 0;
    m_iFTPTransFail = 0;
    m_iFTPRename = 0;
    m_iFTPRenameFail = 0;
}

SftpClient::~SftpClient()
{
    closesession();
    closeSFTP();
}

bool SftpClient::start(CenterInfo configinfo)
{
    config = configinfo;
    const char *ipcvt;
    QByteArray cvt;

    ipcvt = config.ip.trimmed().toLocal8Bit();
    hostaddr = inet_addr(ipcvt);

    brun = true;
    QThread::start();

    return brun;
}

void SftpClient::run()
{
    int lastCount = 0;
    bool isRetry = false;
    QDateTime lastTime = QDateTime::currentDateTime().addDays(-1);

    username = config.userID.toStdString().c_str();
    password = config.password.toStdString().c_str();
    sftppath = config.ftpPath.toStdString().c_str();

    logstr = QString("ip : %1, username : %2, password : %3, sftppath : %4").arg(hostaddr).arg(username).arg(password).arg(sftppath);
    log->write(logstr,LOG_NOTICE);
    qDebug() << logstr;
    emit logappend(logstr);

    sshinit();
    connectSocket();
    initSession();

    while(brun)
    {
        if(config.protocol_type == CenterInfo::Remote)
        {
            msleep(500);
            continue;
        }
        else if(sftp_sendfileInfolist.Count() == 0)
        {
            ScanSendDataFiles();
            msleep(500);

            if(sftp_sendfileInfolist.Count() == 0)
                continue;
        }

        while(sftp_sendfileInfolist.Count() > 0)
        {
            sftp_sendfileInfo = sftp_sendfileInfolist.GetFirstFile();
            if(sftp_sendfileInfo.filename.isNull() || sftp_sendfileInfo.filename.isEmpty())
            {
                msleep(50);
                continue;
            }

            if(isRetry)
            {
                if(lastTime.secsTo(QDateTime::currentDateTime()) < 2000)
                {
                    msleep(10);
                    continue;
                }
            }

            QByteArray cvt;
            QString fpath = QString("%1/%2/").arg(commonvalues::FTPSavePath).arg(config.centername);

            // Send
            lastTime = QDateTime::currentDateTime();
            QFile file(sftp_sendfileInfo.filepath);
            if(!file.open(QIODevice::ReadOnly))
                continue;

            QString fname = sftp_sendfileInfo.filename.mid(0, 1);   // H, X
            QString rname = sftp_sendfileInfo.filename.mid(1);      // ~~~.jpg, ~~~.txt

            if(sftp_sendfileInfo.filename.mid(0,1).compare("M") != 0)
            {
                if(sftp_sendfileInfo.filename.mid(0,1).compare("H") == 0)
                    onlyfilename = rname;
                else if(sftp_sendfileInfo.filename.mid(0,1).compare("X") == 0)
                    onlyfilename = rname;
                else
                    onlyfilename = sftp_sendfileInfo.filename;
            }
            else
                onlyfilename = sftp_sendfileInfo.filename;

            fpath.append(sftp_sendfileInfo.filename);
            cvt = fpath.toLocal8Bit();
            localfile = cvt.data();

            local = fopen(localfile, "rb");

            if(!local)
            {
                logstr = QString("SFTP : 파일 열기 실패..");
                msleep(500);
            }
            else
            {
                logstr = QString("SFTP : 파일 열기 성공!!");
            }

            log->write(logstr,LOG_NOTICE);
            qDebug() << logstr;
            emit logappend(logstr);


            if(initSFTP())
            {
                if(sftp_session != NULL && sftp_handle != NULL)
                {
                    LIBSSH2_SFTP_ATTRIBUTES attrs;
                    if(libssh2_sftp_fstat_ex(sftp_handle, &attrs, 0) < 0)
                    {
                        logstr = QString("SFTP : libssh2_sftp_fstat fail..");
                        log->write(logstr, LOG_NOTICE);
                        qDebug() << logstr;
                        emit logappend(logstr);
                    }
                    else
                    {
                        libssh2_sftp_seek64(sftp_handle, attrs.filesize);
                    }

                    if(attrs.filesize > 0)
                    {
                        cvt = onlyfilename.toLocal8Bit();
                        const char* srcname = cvt.data();

                        cvt = sftp_sendfileInfo.filename.toLocal8Bit();
                        const char* dstname = cvt.data();

                        libssh2_sftp_rename(sftp_session, srcname, dstname);
                        logstr = QString("SFTP파일 이름변경 성공 : %1 -> %2").arg(rname).arg(sftp_sendfileInfo.filename);
                        log->write(logstr,LOG_NOTICE); qDebug() << logstr;
                        emit logappend(logstr);

                        file.close();
                    }
                }

                sftp_sendfileInfolist.RemoveFirstFile(sftp_sendfileInfo);
            }

            if(lastCount != sftp_sendfileInfolist.Count())
            {
                lastCount = sftp_sendfileInfolist.Count();
                logstr = QString("SFTP전송 파일 리스트 : %1").arg(lastCount);
                log->write(logstr, LOG_NOTICE);
                qDebug() << logstr;
                emit logappend(logstr);

                msleep(500);
            }
        }
    }
}

void SftpClient::stop()
{
    brun = false;
}

bool SftpClient::sshinit()
{
    bool sshSuc = true;
    int sshinit = 0;

    sshinit = libssh2_init(0);
    if(sshinit != 0)
    {
        logstr = QString("SFTP : libssh2 초기화 실패..");
        sshSuc = false;
    }
    else
    {
        logstr = QString("SFTP : libssh2 초기화 성공!!");
        sshSuc = true;
    }

    log->write(logstr,LOG_NOTICE);
    qDebug() << logstr;
    emit logappend(logstr);

    return sshSuc;
}

bool SftpClient::connectSocket()
{
    bool connectSock = true;
    struct sockaddr_in sin;

    sock = socket(AF_INET, SOCK_STREAM, 0);

    sin.sin_family = AF_INET;
    sin.sin_port = htons(22);
    sin.sin_addr.s_addr = hostaddr;
    if(::connect(sock, (struct sockaddr*)(&sin), sizeof(struct sockaddr_in)) != 0)
    {
        logstr = QString("SFTP : Socket 연결 실패..");
        connectSock = false;
    }
    else
    {
        logstr = QString("SFTP : Socket 연결 성공!!");
        connectSock = true;
    }

    log->write(logstr,LOG_NOTICE);
    qDebug() << logstr;
    emit logappend(logstr);

    return connectSock;

}

bool SftpClient::initSession()
{
    bool sessionSuc = true;
    int sessioninit = 0;
    int auth_pw = 1;

    session = libssh2_session_init();
    if(!session)
    {
        sessionSuc = false;
    }

    libssh2_session_set_blocking(session, 1);
    sessioninit = libssh2_session_handshake(session, sock);
    if(sessioninit)
    {
        logstr = QString("SFTP : SSH Session 설정 실패..");
        sessionSuc = false;
    }
    else
    {
        logstr = QString("SFTP : SSH Session 설정 성공!!");
        sessionSuc = true;
    }

    log->write(logstr,LOG_NOTICE);
    qDebug() << logstr;
    emit logappend(logstr);

    libssh2_hostkey_hash(session, LIBSSH2_HOSTKEY_HASH_SHA1);

    if(auth_pw)
    {
        logstr = QString("ip : %1, username : %2, password : %3, sftppath : %4").arg(hostaddr).arg(username).arg(password).arg(sftppath);
        log->write(logstr,LOG_NOTICE);
        qDebug() << logstr;
        emit logappend(logstr);

        if(libssh2_userauth_password(session, username, password))
        {
            logstr = QString("SFTP : ID/PW 인증 실패..");
            log->write(logstr,LOG_NOTICE);
            qDebug() << logstr;
            emit logappend(logstr);
            closesession();

            sessionSuc = false;
        }
        else
        {
            logstr = QString("SFTP : ID/PW 인증 성공!!");
            log->write(logstr,LOG_NOTICE);
            qDebug() << logstr;
            emit logappend(logstr);
        }
    }

    return sessionSuc;
}

bool SftpClient::initSFTP()
{
    int sendcount = 0;
    bool sftpSuc = false;

    char mem[1024*100];
    size_t nread;
    char *ptr;

    sftp_session = libssh2_sftp_init(session);

    logstr = QString("SFTP : SFTP 초기화!!");
    log->write(logstr,LOG_NOTICE);
    qDebug() << logstr;
    emit logappend(logstr);

    QString Remotefilepath = QString("%1%2").arg(config.ftpPath).arg(onlyfilename);
    QByteArray cvt;
    cvt = Remotefilepath.toLocal8Bit();
    const char* _sftppath = cvt.data();

    sftp_handle = libssh2_sftp_open(sftp_session, _sftppath,
                                    LIBSSH2_FXF_WRITE | LIBSSH2_FXF_CREAT | LIBSSH2_FXF_TRUNC,
                                    LIBSSH2_SFTP_S_IRUSR|LIBSSH2_SFTP_S_IWUSR|
                                    LIBSSH2_SFTP_S_IRGRP|LIBSSH2_SFTP_S_IROTH);
    if(!sftp_handle)
    {
        logstr = QString("SFTP : SFTP 연결 실패!!");
        log->write(logstr,LOG_NOTICE);
        qDebug() << logstr;
        emit logappend(logstr);
        closesession();

        sftpSuc = false;
    }
    else
    {
        logstr = QString("SFTP : SFTP 연결 성공!!");
        log->write(logstr,LOG_NOTICE);
        qDebug() << logstr;
        emit logappend(logstr);

        sftpSuc = true;
    }

    do
    {
        nread = fread(mem, 1, sizeof(mem), local);
        if(nread <= 0)
        {
            // end of file
            break;
        }
        ptr = mem;

        do
        {
            // write data in a loop until we block
            sendcount = libssh2_sftp_write(sftp_handle, ptr, nread);
            if(sendcount < 0)
            {
                sftpSuc = false;
                break;
            }

            ptr += sendcount;
            nread -= sendcount;
        }
        while(nread);
    }
    while(sendcount > 0);

    return sftpSuc;
}

void SftpClient::closeSFTP()
{
    libssh2_sftp_close(sftp_handle);
    libssh2_sftp_shutdown(sftp_session);
}

void SftpClient::closesession()
{
    libssh2_session_disconnect(session, "Normal Shutdown");
    libssh2_session_free(session);
}

void SftpClient::ScanSendDataFiles()
{
    QString logstr;
    QString path = QString("%1/%2").arg(commonvalues::FTPSavePath).arg(config.centername);
    QDir dir(path);
    try
    {
        if( !dir.exists())
        {
            dir.mkdir(path);
        }
    }
    catch( ... )
    {
        qDebug() << QString("ScanSendDataFiles-Directory Check  Exception");
        return;
    }

    QFileInfoList filepaths;
    sftp_sendfileInfolist.ClearAll();

    try
    {
        QStringList filters;
        filters << "*.jpg" << "*.jpeg" << "*.txt";
        filepaths = dir.entryInfoList(filters);
    }
    catch( ... )
    {
        qDebug() << QString("ScanSendDataFiles-Search Entryile Exception");
        return;
    }

    foreach (QFileInfo filepath, filepaths)
    {
        QString fpath = filepath.absoluteFilePath();
        if( sftp_sendfileInfo.ParseFilepath(fpath))
        {
            if( sftp_sendfileInfolist.AddFile(sftp_sendfileInfo))
            {
                logstr = QString("FTP전송 데이터 추가 : %1").arg(fpath);
                log->write(logstr,LOG_NOTICE);  qDebug() <<  logstr;

            }
            else DeleteFile(fpath);
        }
        else
            DeleteFile(fpath);

        if( sftp_sendfileInfolist.Count() > 30 )
        {
            break;
        }
    }

    if( sftp_sendfileInfolist.Count() > 0)
    {
        logstr = QString("SFTP전송 파일 리스트 : %1").arg(sftp_sendfileInfolist.Count());
        log->write(logstr,LOG_NOTICE);  qDebug() <<  logstr;
    }

}

void SftpClient::DeleteFile(QString filepath)
{
    try
    {
        QFile file(filepath);

        try{
            file.remove();
        }
        catch(exception ex)
        {
            qDebug() << ex.what();
        }

        /*
        if(file.remove())
        {
            logstr = QString("SFTP 파일 삭제 : %1").arg(sftp_sendfileInfo.filename);
            log->write(logstr,LOG_NOTICE);
            qDebug() <<  logstr;
            logappend(logstr);
        }
        else
        {
            logappend("No file");
        }*/
    }
    catch( ... )
    {
        qDebug() << QString("DeleteFile exception");
    }
}
